import path from 'path'
import webpack from 'webpack'
import HtmlWebpackPlugin from 'html-webpack-plugin'
import WebpackMd5Hash from 'webpack-md5-hash'
import ExtractTextPlugin from 'extract-text-webpack-plugin'
import SWPrecacheWebpackPlugin from 'sw-precache-webpack-plugin'

const PUBLIC_PATH = 'http://localhost:3000/'

export default {
  devtool: 'source-map',
  entry: {
    vendor: path.resolve(__dirname, 'src/vendor'),
    main: path.resolve(__dirname, 'src/index'),
  },
  target: 'web',
  resolve: {
    // Add '.ts' and '.tsx' as resolvable extensions.
    extensions: ['.ts', '.tsx', '.js', '.json'],
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    publicPath: PUBLIC_PATH,
    filename: '[name].[chunkhash].js', // 'name' is the keys defined in the entry object above
                                       // 'chunkhash' is a variable generated by webpack-md5-hash
  },
  plugins: [
    // Generate an external css file with a hash in the filename
    new ExtractTextPlugin('[name].[contenthash].css'),

    // Hash the files using MD5 so that their names change when the content changes
    new WebpackMd5Hash(),

    // Use CommonsChunkPlugin to create a separate bundle
    // of vendor libraries so that they're cached separately
    // Without this plugin, splitting bundles wouldn't actually
    // help because our vendor plugins would still be included
    // in our main bundle, causing them to be downloaded twice
    new webpack.optimize.CommonsChunkPlugin({
      name: 'vendor',
    }),

    // Create HTML file that includes reference to bundled JS
    new HtmlWebpackPlugin({
      template: 'src/index.html',
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true,
      },
      inject: true, // Automatically inject any necessary script tags
    }),

    // Minify javascript code
    new webpack.optimize.UglifyJsPlugin(),

    // Generate a service worker script that will precache, and keep up to date,
    // the HTML & assets that are part of the Webpack build.
    new SWPrecacheWebpackPlugin({
      // By default, a cache-busting query parameter is appended to requests
      // used to populate the caches, to ensure the responses are fresh.
      // If a URL is already hashed by Webpack, then there is no concern
      // about it being stale, and the cache-busting can be skipped.
      dontCacheBustUrlsMatching: /\.\w{8}\./,
      cacheId: 'catalyst',
      filename: 'service-worker.js',
      minify: false,
      // For unknown URLs, fallback to the index page
      navigateFallback: PUBLIC_PATH + 'index.html',
      // Don't precache sourcemaps (they're large) and build asset manifest:
      staticFileGlobsIgnorePatterns: [/\.map$/, /asset-manifest\.json$/],
    }),
  ],
  module: {
    rules: [
      { test: /\.tsx?$/, exclude: /node_modules/,
        use: [
          // Transpile down to target JS version
          'babel-loader',
          // Compile typescript
          'awesome-typescript-loader',
          // Remove code based on pre-processor directives e.g. #if DEBUG
          {loader: 'ifdef-loader', options: {DEBUG: false}},
        ],
      },
      {test: /\.css$/,
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: [ // Note that these loaders are applied in reverse order, the last one first
            {
              loader: 'typings-for-css-modules-loader',
              options: {
                modules: true,
                namedExport: true,
                camelCase: true,
                importLoaders: 1,
                localIdentName: '[name]__[local]___[hash:base64:5]',
              },
            },
            'postcss-loader',
          ],
        }),
      },
      {test: /\.scss$/,
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: [ // Note that these loaders are applied in reverse order, the last one first
            // 4. Use CSS modules, generating class names in the specified format
            // 3. Load the CSS file contents
            {
              loader: 'typings-for-css-modules-loader',
              options: {
                modules: true,
                namedExport: true,
                importLoaders: 1,
                localIdentName: '[name]__[local]___[hash:base64:5]',
              },
            },
            'postcss-loader', // 2. Perform any transformations specified in postcss.config.js
            'sass-loader',    // 1. Compile SASS into CSS
          ],
        }),
      },
    ],
  },
}