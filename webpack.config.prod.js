import path from 'path'
import HtmlWebpackPlugin from 'html-webpack-plugin'
import WebpackMd5Hash from 'webpack-md5-hash'
import MiniCssExtractPlugin from 'mini-css-extract-plugin'

export default {
  mode: 'production',
  devtool: 'source-map',
  entry: {
    vendor: path.resolve(__dirname, 'src/vendor'),
    NurseManagementSystem: path.resolve(__dirname, 'src/index'),
  },
  target: 'web',
  resolve: {
    extensions: ['.ts', '.tsx', '.js', '.json'],
    alias: {
      'src': path.resolve(__dirname, './src'),
    },
  },
  output: {
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/',
    filename: '[name].[chunkhash].js', // 'name' is the keys defined in the entry object above
                                       // 'chunkhash' is a variable generated by webpack-md5-hash
  },
  optimization: {
    splitChunks: {
      cacheGroups: {
        node_vendors: {
          test: /[\\/]node_modules[\\/]/,
          chunks: 'all',
          priority: 1,
        },
      },
    },
    minimize: true,
  },
  plugins: [
    // Generate an external css file with a hash in the filename
    new MiniCssExtractPlugin('[name].[contenthash].css'),

    // Hash the files using MD5 so that their names change when the content changes
    new WebpackMd5Hash(),

    // Create HTML file that includes reference to bundled JS
    new HtmlWebpackPlugin({
      template: 'src/index.html',
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true,
      },
      inject: true, // Automatically inject any necessary script tags
    }),
  ],
  module: {
    rules: [
      { test: /\.tsx?$/, exclude: /node_modules/,
        use: [
          'babel-loader',
          'awesome-typescript-loader',
          {loader: 'ifdef-loader', options: {DEBUG: false}},
        ],
      },
      { test: /\.jsx?$/, exclude: /node_modules/,
        use: [
          'babel-loader',
          {loader: 'ifdef-loader', options: {DEBUG: false}},
        ],
      },
      {test: /\.scss$/, use: [ // Note that these loaders are applied in reverse order, the last one first
        MiniCssExtractPlugin.loader, // 5. Split css into separate (*.css) files
        // 4. Use CSS modules, generating class names in the specified format
        // 3. Load the CSS file contents
        {
          loader: 'typings-for-css-modules-loader',
          options: {
            modules: true,
            namedExport: true,
            importLoaders: 1,
            localIdentName: '[name]__[local]___[hash:base64:5]',
          },
        },
        'postcss-loader', // 2. Perform any transformations specified in postcss.config.js
        'sass-loader',    // 1. Compile SASS into CSS
      ]},
    ],
  },
}